/*
 * This file is generated by jOOQ.
 */
package com.kg.macroanalyzer.jooq.generated.tables;


import com.kg.macroanalyzer.jooq.generated.Keys;
import com.kg.macroanalyzer.jooq.generated.Public;
import com.kg.macroanalyzer.jooq.generated.tables.records.SeriesConfigurationRecord;

import java.time.LocalDateTime;
import java.util.UUID;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function9;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SeriesConfiguration extends TableImpl<SeriesConfigurationRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.series_configuration</code>
     */
    public static final SeriesConfiguration SERIES_CONFIGURATION = new SeriesConfiguration();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SeriesConfigurationRecord> getRecordType() {
        return SeriesConfigurationRecord.class;
    }

    /**
     * The column <code>public.series_configuration.id</code>.
     */
    public final TableField<SeriesConfigurationRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.series_configuration.global_id</code>.
     */
    public final TableField<SeriesConfigurationRecord, UUID> GLOBAL_ID = createField(DSL.name("global_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.series_configuration.name</code>.
     */
    public final TableField<SeriesConfigurationRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>public.series_configuration.display_name</code>.
     */
    public final TableField<SeriesConfigurationRecord, String> DISPLAY_NAME = createField(DSL.name("display_name"), SQLDataType.VARCHAR(200).nullable(false), this, "");

    /**
     * The column <code>public.series_configuration.country</code>.
     */
    public final TableField<SeriesConfigurationRecord, String> COUNTRY = createField(DSL.name("country"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>public.series_configuration.period</code>.
     */
    public final TableField<SeriesConfigurationRecord, String> PERIOD = createField(DSL.name("period"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>public.series_configuration.created</code>.
     */
    public final TableField<SeriesConfigurationRecord, LocalDateTime> CREATED = createField(DSL.name("created"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.series_configuration.updated</code>.
     */
    public final TableField<SeriesConfigurationRecord, LocalDateTime> UPDATED = createField(DSL.name("updated"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.series_configuration.scrape_url</code>.
     */
    public final TableField<SeriesConfigurationRecord, String> SCRAPE_URL = createField(DSL.name("scrape_url"), SQLDataType.VARCHAR(200), this, "");

    private SeriesConfiguration(Name alias, Table<SeriesConfigurationRecord> aliased) {
        this(alias, aliased, null);
    }

    private SeriesConfiguration(Name alias, Table<SeriesConfigurationRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.series_configuration</code> table
     * reference
     */
    public SeriesConfiguration(String alias) {
        this(DSL.name(alias), SERIES_CONFIGURATION);
    }

    /**
     * Create an aliased <code>public.series_configuration</code> table
     * reference
     */
    public SeriesConfiguration(Name alias) {
        this(alias, SERIES_CONFIGURATION);
    }

    /**
     * Create a <code>public.series_configuration</code> table reference
     */
    public SeriesConfiguration() {
        this(DSL.name("series_configuration"), null);
    }

    public <O extends Record> SeriesConfiguration(Table<O> child, ForeignKey<O, SeriesConfigurationRecord> key) {
        super(child, key, SERIES_CONFIGURATION);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<SeriesConfigurationRecord, Integer> getIdentity() {
        return (Identity<SeriesConfigurationRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<SeriesConfigurationRecord> getPrimaryKey() {
        return Keys.SERIES_CONFIGURATION_PKEY;
    }

    @Override
    public SeriesConfiguration as(String alias) {
        return new SeriesConfiguration(DSL.name(alias), this);
    }

    @Override
    public SeriesConfiguration as(Name alias) {
        return new SeriesConfiguration(alias, this);
    }

    @Override
    public SeriesConfiguration as(Table<?> alias) {
        return new SeriesConfiguration(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public SeriesConfiguration rename(String name) {
        return new SeriesConfiguration(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SeriesConfiguration rename(Name name) {
        return new SeriesConfiguration(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public SeriesConfiguration rename(Table<?> name) {
        return new SeriesConfiguration(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Integer, UUID, String, String, String, String, LocalDateTime, LocalDateTime, String> fieldsRow() {
        return (Row9) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function9<? super Integer, ? super UUID, ? super String, ? super String, ? super String, ? super String, ? super LocalDateTime, ? super LocalDateTime, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function9<? super Integer, ? super UUID, ? super String, ? super String, ? super String, ? super String, ? super LocalDateTime, ? super LocalDateTime, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
