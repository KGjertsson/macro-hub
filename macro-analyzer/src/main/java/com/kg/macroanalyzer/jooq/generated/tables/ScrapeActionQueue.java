/*
 * This file is generated by jOOQ.
 */
package com.kg.macroanalyzer.jooq.generated.tables;


import com.kg.macroanalyzer.jooq.generated.Keys;
import com.kg.macroanalyzer.jooq.generated.Public;
import com.kg.macroanalyzer.jooq.generated.tables.records.ScrapeActionQueueRecord;

import java.time.LocalDateTime;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function6;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ScrapeActionQueue extends TableImpl<ScrapeActionQueueRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.scrape_action_queue</code>
     */
    public static final ScrapeActionQueue SCRAPE_ACTION_QUEUE = new ScrapeActionQueue();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ScrapeActionQueueRecord> getRecordType() {
        return ScrapeActionQueueRecord.class;
    }

    /**
     * The column <code>public.scrape_action_queue.id</code>.
     */
    public final TableField<ScrapeActionQueueRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.scrape_action_queue.dataset_name</code>.
     */
    public final TableField<ScrapeActionQueueRecord, String> DATASET_NAME = createField(DSL.name("dataset_name"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>public.scrape_action_queue.scrape_date</code>.
     */
    public final TableField<ScrapeActionQueueRecord, LocalDateTime> SCRAPE_DATE = createField(DSL.name("scrape_date"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.scrape_action_queue.created</code>.
     */
    public final TableField<ScrapeActionQueueRecord, LocalDateTime> CREATED = createField(DSL.name("created"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.scrape_action_queue.updated</code>.
     */
    public final TableField<ScrapeActionQueueRecord, LocalDateTime> UPDATED = createField(DSL.name("updated"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.scrape_action_queue.status</code>.
     */
    public final TableField<ScrapeActionQueueRecord, Integer> STATUS = createField(DSL.name("status"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.INTEGER)), this, "");

    private ScrapeActionQueue(Name alias, Table<ScrapeActionQueueRecord> aliased) {
        this(alias, aliased, null);
    }

    private ScrapeActionQueue(Name alias, Table<ScrapeActionQueueRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.scrape_action_queue</code> table reference
     */
    public ScrapeActionQueue(String alias) {
        this(DSL.name(alias), SCRAPE_ACTION_QUEUE);
    }

    /**
     * Create an aliased <code>public.scrape_action_queue</code> table reference
     */
    public ScrapeActionQueue(Name alias) {
        this(alias, SCRAPE_ACTION_QUEUE);
    }

    /**
     * Create a <code>public.scrape_action_queue</code> table reference
     */
    public ScrapeActionQueue() {
        this(DSL.name("scrape_action_queue"), null);
    }

    public <O extends Record> ScrapeActionQueue(Table<O> child, ForeignKey<O, ScrapeActionQueueRecord> key) {
        super(child, key, SCRAPE_ACTION_QUEUE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<ScrapeActionQueueRecord, Integer> getIdentity() {
        return (Identity<ScrapeActionQueueRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<ScrapeActionQueueRecord> getPrimaryKey() {
        return Keys.SCRAPE_ACTION_QUEUE_PKEY;
    }

    @Override
    public ScrapeActionQueue as(String alias) {
        return new ScrapeActionQueue(DSL.name(alias), this);
    }

    @Override
    public ScrapeActionQueue as(Name alias) {
        return new ScrapeActionQueue(alias, this);
    }

    @Override
    public ScrapeActionQueue as(Table<?> alias) {
        return new ScrapeActionQueue(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ScrapeActionQueue rename(String name) {
        return new ScrapeActionQueue(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ScrapeActionQueue rename(Name name) {
        return new ScrapeActionQueue(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ScrapeActionQueue rename(Table<?> name) {
        return new ScrapeActionQueue(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, String, LocalDateTime, LocalDateTime, LocalDateTime, Integer> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function6<? super Integer, ? super String, ? super LocalDateTime, ? super LocalDateTime, ? super LocalDateTime, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function6<? super Integer, ? super String, ? super LocalDateTime, ? super LocalDateTime, ? super LocalDateTime, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
