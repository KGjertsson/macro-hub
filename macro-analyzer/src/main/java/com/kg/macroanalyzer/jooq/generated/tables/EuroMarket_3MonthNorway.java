/*
 * This file is generated by jOOQ.
 */
package com.kg.macroanalyzer.jooq.generated.tables;


import com.kg.macroanalyzer.jooq.generated.Keys;
import com.kg.macroanalyzer.jooq.generated.Public;
import com.kg.macroanalyzer.jooq.generated.tables.records.EuroMarket_3MonthNorwayRecord;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.UUID;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function6;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EuroMarket_3MonthNorway extends TableImpl<EuroMarket_3MonthNorwayRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.euro_market_3_month_norway</code>
     */
    public static final EuroMarket_3MonthNorway EURO_MARKET_3_MONTH_NORWAY = new EuroMarket_3MonthNorway();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EuroMarket_3MonthNorwayRecord> getRecordType() {
        return EuroMarket_3MonthNorwayRecord.class;
    }

    /**
     * The column <code>public.euro_market_3_month_norway.id</code>.
     */
    public final TableField<EuroMarket_3MonthNorwayRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.euro_market_3_month_norway.global_id</code>.
     */
    public final TableField<EuroMarket_3MonthNorwayRecord, UUID> GLOBAL_ID = createField(DSL.name("global_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.euro_market_3_month_norway.value</code>.
     */
    public final TableField<EuroMarket_3MonthNorwayRecord, Double> VALUE = createField(DSL.name("value"), SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>public.euro_market_3_month_norway.date</code>.
     */
    public final TableField<EuroMarket_3MonthNorwayRecord, LocalDate> DATE = createField(DSL.name("date"), SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * The column <code>public.euro_market_3_month_norway.created</code>.
     */
    public final TableField<EuroMarket_3MonthNorwayRecord, LocalDateTime> CREATED = createField(DSL.name("created"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.euro_market_3_month_norway.updated</code>.
     */
    public final TableField<EuroMarket_3MonthNorwayRecord, LocalDateTime> UPDATED = createField(DSL.name("updated"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.LOCALDATETIME)), this, "");

    private EuroMarket_3MonthNorway(Name alias, Table<EuroMarket_3MonthNorwayRecord> aliased) {
        this(alias, aliased, null);
    }

    private EuroMarket_3MonthNorway(Name alias, Table<EuroMarket_3MonthNorwayRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.euro_market_3_month_norway</code> table
     * reference
     */
    public EuroMarket_3MonthNorway(String alias) {
        this(DSL.name(alias), EURO_MARKET_3_MONTH_NORWAY);
    }

    /**
     * Create an aliased <code>public.euro_market_3_month_norway</code> table
     * reference
     */
    public EuroMarket_3MonthNorway(Name alias) {
        this(alias, EURO_MARKET_3_MONTH_NORWAY);
    }

    /**
     * Create a <code>public.euro_market_3_month_norway</code> table reference
     */
    public EuroMarket_3MonthNorway() {
        this(DSL.name("euro_market_3_month_norway"), null);
    }

    public <O extends Record> EuroMarket_3MonthNorway(Table<O> child, ForeignKey<O, EuroMarket_3MonthNorwayRecord> key) {
        super(child, key, EURO_MARKET_3_MONTH_NORWAY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<EuroMarket_3MonthNorwayRecord, Integer> getIdentity() {
        return (Identity<EuroMarket_3MonthNorwayRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<EuroMarket_3MonthNorwayRecord> getPrimaryKey() {
        return Keys.EURO_MARKET_3_MONTH_NORWAY_PKEY;
    }

    @Override
    public EuroMarket_3MonthNorway as(String alias) {
        return new EuroMarket_3MonthNorway(DSL.name(alias), this);
    }

    @Override
    public EuroMarket_3MonthNorway as(Name alias) {
        return new EuroMarket_3MonthNorway(alias, this);
    }

    @Override
    public EuroMarket_3MonthNorway as(Table<?> alias) {
        return new EuroMarket_3MonthNorway(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public EuroMarket_3MonthNorway rename(String name) {
        return new EuroMarket_3MonthNorway(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public EuroMarket_3MonthNorway rename(Name name) {
        return new EuroMarket_3MonthNorway(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public EuroMarket_3MonthNorway rename(Table<?> name) {
        return new EuroMarket_3MonthNorway(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, UUID, Double, LocalDate, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function6<? super Integer, ? super UUID, ? super Double, ? super LocalDate, ? super LocalDateTime, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function6<? super Integer, ? super UUID, ? super Double, ? super LocalDate, ? super LocalDateTime, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
