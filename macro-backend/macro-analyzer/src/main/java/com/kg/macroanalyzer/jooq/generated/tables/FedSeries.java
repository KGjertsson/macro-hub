/*
 * This file is generated by jOOQ.
 */
package com.kg.macroanalyzer.jooq.generated.tables;


import com.kg.macroanalyzer.jooq.generated.Indexes;
import com.kg.macroanalyzer.jooq.generated.Keys;
import com.kg.macroanalyzer.jooq.generated.Public;
import com.kg.macroanalyzer.jooq.generated.tables.records.FedSeriesRecord;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function7;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FedSeries extends TableImpl<FedSeriesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.fed_series</code>
     */
    public static final FedSeries FED_SERIES = new FedSeries();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FedSeriesRecord> getRecordType() {
        return FedSeriesRecord.class;
    }

    /**
     * The column <code>public.fed_series.id</code>.
     */
    public final TableField<FedSeriesRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.fed_series.global_id</code>.
     */
    public final TableField<FedSeriesRecord, UUID> GLOBAL_ID = createField(DSL.name("global_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.fed_series.series_name</code>.
     */
    public final TableField<FedSeriesRecord, String> SERIES_NAME = createField(DSL.name("series_name"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>public.fed_series.value</code>.
     */
    public final TableField<FedSeriesRecord, Double> VALUE = createField(DSL.name("value"), SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>public.fed_series.date</code>.
     */
    public final TableField<FedSeriesRecord, LocalDate> DATE = createField(DSL.name("date"), SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * The column <code>public.fed_series.created</code>.
     */
    public final TableField<FedSeriesRecord, LocalDateTime> CREATED = createField(DSL.name("created"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.fed_series.updated</code>.
     */
    public final TableField<FedSeriesRecord, LocalDateTime> UPDATED = createField(DSL.name("updated"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.LOCALDATETIME)), this, "");

    private FedSeries(Name alias, Table<FedSeriesRecord> aliased) {
        this(alias, aliased, null);
    }

    private FedSeries(Name alias, Table<FedSeriesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.fed_series</code> table reference
     */
    public FedSeries(String alias) {
        this(DSL.name(alias), FED_SERIES);
    }

    /**
     * Create an aliased <code>public.fed_series</code> table reference
     */
    public FedSeries(Name alias) {
        this(alias, FED_SERIES);
    }

    /**
     * Create a <code>public.fed_series</code> table reference
     */
    public FedSeries() {
        this(DSL.name("fed_series"), null);
    }

    public <O extends Record> FedSeries(Table<O> child, ForeignKey<O, FedSeriesRecord> key) {
        super(child, key, FED_SERIES);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.FED_SERIES_NAME);
    }

    @Override
    public Identity<FedSeriesRecord, Integer> getIdentity() {
        return (Identity<FedSeriesRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<FedSeriesRecord> getPrimaryKey() {
        return Keys.FED_SERIES_PKEY;
    }

    @Override
    public FedSeries as(String alias) {
        return new FedSeries(DSL.name(alias), this);
    }

    @Override
    public FedSeries as(Name alias) {
        return new FedSeries(alias, this);
    }

    @Override
    public FedSeries as(Table<?> alias) {
        return new FedSeries(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public FedSeries rename(String name) {
        return new FedSeries(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public FedSeries rename(Name name) {
        return new FedSeries(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public FedSeries rename(Table<?> name) {
        return new FedSeries(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Integer, UUID, String, Double, LocalDate, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function7<? super Integer, ? super UUID, ? super String, ? super Double, ? super LocalDate, ? super LocalDateTime, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function7<? super Integer, ? super UUID, ? super String, ? super Double, ? super LocalDate, ? super LocalDateTime, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
